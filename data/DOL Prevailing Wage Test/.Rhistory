# path projects
user_path = "/Users/sarah/Library/CloudStorage/GoogleDrive-sarah@eig.org/.shortcut-targets-by-id/0B8XLtQT1s8ceT2tKZWZmTkJmM1k"
# remove dependencies
rm(list = ls())
# load packages
library(readxl)
library(tidycensus)
library(tidyr)
library(dplyr)
library(haven)
library(stringr)
library(readr)
# path projects
user_path = "/Users/sarah/Library/CloudStorage/GoogleDrive-sarah@eig.org/.shortcut-targets-by-id/0B8XLtQT1s8ceT2tKZWZmTkJmM1k"
path_project = file.path(user_path, "EIG/RESEARCH TEAM/1 ACTIVE/2024 H-1B Fiscal Impacts/Federal Model")
# remove dependencies
rm(list = ls())
# load packages
library(readxl)
library(tidycensus)
library(tidyr)
library(dplyr)
library(haven)
library(stringr)
library(readr)
# path projects
user_path = "/Users/sarah/Library/CloudStorage/GoogleDrive-sarah@eig.org/.shortcut-targets-by-id/0B8XLtQT1s8ceT2tKZWZmTkJmM1k"
path_project = file.path(user_path, "EIG/RESEARCH TEAM/1 ACTIVE/2024 H-1B Fiscal Impacts/Federal Model")
path_data = file.path(path_project, "Data/DOL Prevailing Wage Test")
path_wrangled = file.path(path_project, "Output")
setwd(path_data)
path_data
# path projects
user_path = "/Users/sarah/Library/CloudStorage/GoogleDrive-sarah@eig.org/.shortcut-targets-by-id/0B8XLtQT1s8ceT2tKZWZmTkJmM1k"
path_project = file.path(user_path, "EIG/RESEARCH TEAM/1 ACTIVE/2024 H-1B Fiscal Impacts/Federal Model")
path_data = file.path(path_project, "Data/DOL Prevailing Wage Test")
path_wrangled = file.path(path_project, "Output")
setwd(path_data)
setwd("/Users/sarah/Library/CloudStorage/GoogleDrive-sarah@eig.org/.shortcut-targets-by-id/0B8XLtQT1s8ceT2tKZWZmTkJmM1k")
setwd("/Users/sarah/Library/CloudStorage/GoogleDrive-sarah@eig.org/.shortcut-targets-by-id/0B8XLtQT1s8ceT2tKZWZmTkJmM1k/EIG/RESEARCH TEAM/1 ACTIVE/2024 H-1B Fiscal Impacts/Federal Model/Data/DOL Prevailing Wage Test")
setwd("/Users/sarah/Library/CloudStorage/GoogleDrive-sarah@eig.org/.shortcut-targets-by-id/0B8XLtQT1s8ceT2tKZWZmTkJmM1k/EIG/RESEARCH TEAM/1 ACTIVE/2024 H-1B Fiscal Impacts/Federal Model/Data/DOL Prevailing Wage Test")
# remove dependencies
rm(list = ls())
# load packages
library(readxl)
library(tidycensus)
library(tidyr)
library(dplyr)
library(haven)
library(stringr)
library(readr)
# path projects
user_path = "/Users/sarah/Library/CloudStorage/GoogleDrive-sarah@eig.org/.shortcut-targets-by-id/0B8XLtQT1s8ceT2tKZWZmTkJmM1k"
path_project = file.path(user_path, "EIG/RESEARCH TEAM/1 ACTIVE/2024 H-1B Fiscal Impacts/Federal Model")
path_data = file.path(path_project, "Data/DOL Prevailing Wage Test")
path_wrangled = file.path(path_project, "Output")
setwd(path_data)
setwd("/Users/sarah/Library/CloudStorage/GoogleDrive-sarah@eig.org/.shortcut-targets-by-id/0B8XLtQT1s8ceT2tKZWZmTkJmM1k/EIG/RESEARCH TEAM/1 ACTIVE/2024 H-1B Fiscal Impacts/Federal Model/Data/DOL Prevailing Wage Test")
setwd(path_data)
setwd("/Users/sarah/Library/CloudStorage/GoogleDrive-sarah@eig.org/.shortcut-targets-by-id/0B8XLtQT1s8ceT2tKZWZmTkJmM1k/EIG/RESEARCH TEAM/1 ACTIVE/2024 H-1B Fiscal Impacts/Federal Model/Data/DOL Prevailing Wage Test")
# remove dependencies
rm(list = ls())
# load packages
library(readxl)
library(tidycensus)
library(tidyr)
library(dplyr)
library(haven)
library(stringr)
library(readr)
# path projects
user_path = "/Users/sarah/Library/CloudStorage/GoogleDrive-sarah@eig.org/.shortcut-targets-by-id/0B8XLtQT1s8ceT2tKZWZmTkJmM1k"
path_project = file.path(user_path, "EIG/RESEARCH TEAM/1 ACTIVE/2024 H-1B Fiscal Impacts/Federal Model")
path_data = file.path(path_project, "Data/DOL Prevailing Wage Test")
path_wrangled = file.path(path_project, "Output")
setwd(path_data)
setwd("/Users/sarah/Library/CloudStorage/GoogleDrive-sarah@eig.org/.shortcut-targets-by-id/0B8XLtQT1s8ceT2tKZWZmTkJmM1k/EIG/RESEARCH TEAM/1 ACTIVE/2024 H-1B Fiscal Impacts/Federal Model/Data/DOL Prevailing Wage Test")
setwd("/Users/sarah/Library/CloudStorage/GoogleDrive-sarah@eig.org/.shortcut-targets-by-id/0B8XLtQT1s8ceT2tKZWZmTkJmM1k/EIG/RESEARCH TEAM/1 ACTIVE/2024 H-1B Fiscal Impacts/Federal Model/Data/DOL Prevailing Wage Test ")
setwd(path_data)
path_data = file.path(path_project, "Data/DOL Prevailing Wage Test ")
path_wrangled = file.path(path_project, "Output")
setwd(path_data)
# read in data and combine
quarters = list()
for (i in (1:4)) {
print(i)
file_name = paste0("LCA_Disclosure_Data_FY2023_Q",i,".csv")
# load and clean
file = read_csv(file_name) %>%
filter(CASE_STATUS =="Certified") %>%
filter(VISA_CLASS == "H-1B") %>%
select(CASE_NUMBER,
CASE_STATUS,
VISA_CLASS,
DECISION_DATE,
NEW_EMPLOYMENT,
WAGE_RATE_OF_PAY_FROM,
WAGE_RATE_OF_PAY_TO,
PREVAILING_WAGE,
WAGE_UNIT_OF_PAY) %>%
mutate(WAGE_RATE_OF_PAY_FROM =
as.numeric(str_replace_all(WAGE_RATE_OF_PAY_FROM,
c("\\$"="", ","=""))),
WAGE_RATE_OF_PAY_TO =
as.numeric(str_replace_all(WAGE_RATE_OF_PAY_TO,
c("\\$"="", ","=""))),
PREVAILING_WAGE =
as.numeric(str_replace_all(PREVAILING_WAGE,
c("\\$"="", ","=""))))
quarters[[i]] = file
}
LCA2023_all = bind_rows(quarters)
# clean up
rm(quarters, file)
# duplicate obs, with case # as unique id.
sum(duplicated(LCA2023_all$CASE_NUMBER)==TRUE)
sum(duplicated(LCA2023_all$CASE_NUMBER)==TRUE) == sum(duplicated(LCA2023_all)==TRUE)
# drop duplicates
LCA2023_all = unique(LCA2023_all)
# get average pay
LCA2023_all = LCA2023_all %>%
# some of these ranges have NA values; formula dependent on NA vals
mutate(AVG_PAY = case_when(
is.na(WAGE_RATE_OF_PAY_FROM) & is.na(WAGE_RATE_OF_PAY_TO) ~
NA,
is.na(WAGE_RATE_OF_PAY_FROM) & !is.na(WAGE_RATE_OF_PAY_TO) ~
WAGE_RATE_OF_PAY_TO,
!is.na(WAGE_RATE_OF_PAY_FROM) & is.na(WAGE_RATE_OF_PAY_TO) ~
WAGE_RATE_OF_PAY_FROM,
!is.na(WAGE_RATE_OF_PAY_FROM) & !is.na(WAGE_RATE_OF_PAY_TO) ~
(WAGE_RATE_OF_PAY_FROM + WAGE_RATE_OF_PAY_TO)/2)) %>%
# make time period adjustments
mutate(ADJUSTED_PAY = case_when(
WAGE_UNIT_OF_PAY== "Year" ~ AVG_PAY,
WAGE_UNIT_OF_PAY== "Week" ~ AVG_PAY*52,
WAGE_UNIT_OF_PAY == "Month" ~ AVG_PAY*12,
WAGE_UNIT_OF_PAY == "Hour" ~ AVG_PAY*2080,
WAGE_UNIT_OF_PAY == "Bi-Weekly" ~ AVG_PAY*26),
# prevailing wages, for comparison
ADJUSTED_PREVAILING = case_when(
WAGE_UNIT_OF_PAY== "Year" ~ PREVAILING_WAGE,
WAGE_UNIT_OF_PAY== "Week" ~ PREVAILING_WAGE*52,
WAGE_UNIT_OF_PAY == "Month" ~ PREVAILING_WAGE*12,
WAGE_UNIT_OF_PAY == "Hour" ~ PREVAILING_WAGE*2080,
WAGE_UNIT_OF_PAY == "Bi-Weekly" ~ PREVAILING_WAGE*26)) %>%
mutate(average_higher_than_prevailing = ADJUSTED_PAY>ADJUSTED_PREVAILING) %>%
# set pay as prevailing for when the adjusted pay is less than the prevailing wage
mutate(ADJ_PAY_PREVAIL = case_when(
ADJUSTED_PAY >= ADJUSTED_PREVAILING ~ ADJUSTED_PAY,
ADJUSTED_PAY < ADJUSTED_PREVAILING ~ ADJUSTED_PREVAILING # illegal
))
###################### ISSUE 1 ######################
# is the proposed wage higher or lower than prevailing wage?
table(LCA2023_all$average_higher_than_prevailing)
###################### ISSUE 2 ######################
count(LCA2023_all)
count(LCA2023_all)  - 386318
print("LCA petitions versus approved H1B visas for 2023 discrepency")
count(LCA2023_all)  - 386318
quantile(LCA2023_all$ADJUSTED_PAY,
c(0.25, 0.5, 0.75, 0.90, 0.95, 0.99), na.rm=TRUE)
