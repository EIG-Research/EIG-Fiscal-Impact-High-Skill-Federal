qintrvmo = as.numeric(qintrvmo))
# read in the memi files for individual income
memi <- lapply(
dir(data_path, pattern = "^memi.*[.]csv$", full.names = TRUE),
fread,
select = c("NEWID",
"SALARYX",
"CU_CODE"),
na.strings = c("", ".", "NA")
) %>% bind_rows() %>%
setnames(old = names(.), new = tolower(names(.))) %>%
mutate(newid = as.character(newid),
salaryx = ifelse(is.na(salaryx), 0, salaryx))
fmli_memi = merge(memi, fmli, by = "newid") %>%
mutate(
# Generate a calendar-year population weight variable
# based on CES's example code.
popwt = ifelse(
qintrvmo %in% 1:3 & qintrvyr %in% year,
(qintrvmo - 1) / 3 * finlwt21 / 4,
ifelse(
qintrvyr %in% (year + 1),
(4 - qintrvmo) / 3 *finlwt21 / 4,
finlwt21 / 4
)
)
) %>%
select(-c(qintrvyr, qintrvmo))
# combine
annual_excise_expend <- left_join(fmli_memi, mtbi, by = "newid") %>%
mutate(across(c(contains("expend")),
~ replace(., is.na(.), 0)))
annual_excise_expend %>%
summarise(mean_excise_expend = sum(total_expend * finlwt21) / sum(popwt),
mean_alcohol = sum(alcohol_expend * finlwt21) / sum(popwt),
mean_tobacco = sum(tobacco_expend * finlwt21) / sum(popwt),
mean_telephone = sum(telephone_expend * finlwt21) / sum(popwt),
mean_gas = sum(gas_expend * finlwt21) / sum(popwt),
mean_airline = sum(airline_expend * finlwt21) / sum(popwt),
mean_salary_household = sum(fsalaryx * popwt) / sum(popwt),
mean_salary_hh_head = sum(salaryx * popwt) / sum(popwt)) %>%
pivot_longer(cols = c(contains("mean")))
# clean up
rm(fmli, mtbi, fmli_memi, memi)
annual_excise_expend %>%
summarise(mean_excise_expend = sum(total_expend * finlwt21) / sum(popwt),
mean_alcohol = sum(alcohol_expend * finlwt21) / sum(popwt),
mean_tobacco = sum(tobacco_expend * finlwt21) / sum(popwt),
mean_telephone = sum(telephone_expend * finlwt21) / sum(popwt),
mean_gas = sum(gas_expend * finlwt21) / sum(popwt),
mean_airline = sum(airline_expend * finlwt21) / sum(popwt),
mean_salary_household = sum(fsalaryx * popwt) / sum(popwt),
mean_salary_hh_head = sum(salaryx * popwt) / sum(popwt)) %>%
pivot_longer(cols = c(contains("mean")))
annual_excise_expend = annual_excise_expend %>%
mutate(across(c(contains("expend")),
~ (.*finlwt21)/popwt,
.names = paste0("{.col}", "_wt"))) %>%
# education categories
mutate(education = case_when(
educ_ref == 0 ~ 1,                             # no edu
(educ_ref == 10 | educ_ref == 11) ~ 1,           # less than HS grad
(educ_ref == 12) ~ 2,                            # HS grad
(educ_ref == 13 | educ_ref == 14) ~ 3,           # some college / < 4 year
educ_ref >= 15 ~ 4                              # BA, and >BA. we collapse these as H-1Bs & H-4s are BA or >BA.
),
# construct age groups to compare to Daniel's age/education breakouts
age_groups = case_when(
age_ref >=18 & age_ref <25 ~ "18-24",
age_ref >=25 & age_ref <30 ~ "25-29",
age_ref >=30 & age_ref <35 ~ "30-34",
age_ref >=35 & age_ref <40 ~ "35-39",
age_ref >=40 & age_ref <45 ~ "40-44",
age_ref >=45 & age_ref <50 ~ "45-49",
age_ref >=50 & age_ref <55 ~ "50-54",
age_ref >=55 & age_ref <60 ~ "55-59",
age_ref >=60 & age_ref <65 ~ "60-64",
age_ref >=65 & age_ref <70 ~ "65-59",
age_ref >=70 & age_ref <80 ~ "70-79",
age_ref >=80  ~ "80+",
TRUE ~ "out of age range")) %>%
# distribute expenditures equally across household members to get an individual estimate.
# this is an underestimate for the reference person
ungroup() %>% group_by(newid) %>%
mutate(members = n()) %>% ungroup() %>%
mutate(per_member_expenditure = total_expend/members) %>%
# construct indicators for household composition
mutate(n_unmarried_partners = 1*(cu_code == 0),
n_spouse = 1*(cu_code==2),
n_child = 1*(cu_code==3),
n_grandchild = 1*(cu_code==4),
n_inlaws = 1*(cu_code ==5),
n_sibling = 1*(cu_code==6),
n_parents = 1*(cu_code==7),
n_other_related = 1*(cu_code==8),
n_unrelated = 1*(cu_code==9),
) %>%
group_by(newid) %>%
mutate(across(contains("n_"),
~sum(.))) %>%
mutate(categorization = case_when(
members==1 ~ "single filer",
n_spouse==1 & members==2 ~ "joint filer no kids",
n_spouse ==1 & (n_child >0 & n_child < 3) &
n_grandchild==0 &
n_inlaws ==0 &
n_sibling==0 &
n_parents==0 &
n_other_related==0 &
n_unrelated==0 ~ "joint filer kids",
TRUE ~ "other"
))
BEA_2023_excise_totals = readxl::read_excel(paste(path_bea, "Table.xlsx", sep="/"),
skip=5)  %>%
filter(`...2` =="Excise taxes") %>%
select(`...2`, `2023`) %>% mutate(`2023` = as.numeric(`2023`))
BEA_2023_excise_totals = BEA_2023_excise_totals$`2023`[1]
# apply 40% of total to quintiles 4 & 5
BEA_2023_excise_applied = BEA_2023_excise_totals*0.40
# apply 40% of total to quintiles 4 & 5
# assuming equal contribution across quintiles. underestimate.
BEA_2023_excise_applied = BEA_2023_excise_totals*0.40
# are H1bs in the right range?
annual_excise_expend %>%   filter(cu_code == 1) %>%
# exclude individuals not reporting any wage/salary income
filter(salaryx > 0) %>% ungroup() %>%
# construct salary quntiles
mutate(
salary_quintile = hutils::weighted_ntile(salaryx, 5, weights = popwt)) %>%
filter(salary_quintile >=4) %>%
ungroup() %>%
summarise(median_quintile_salary = median(salaryx, na.rm = TRUE),
mean_quintile_salary = mean(salaryx, na.rm = TRUE))
excise_taxes_applied = annual_excise_expend %>% filter(cu_code == 1) %>%
filter(salaryx > 0) %>% ungroup() %>%
mutate(
salary_quintile = hutils::weighted_ntile(salaryx, 5, weights = popwt)) %>%
filter(salary_quintile >=4) %>%
mutate(mean_quintile_salary = mean(fsalaryx, na.rm = TRUE)) %>% # base rate on total household salary (hh head + spouse)
ungroup() %>%
group_by(categorization, mean_quintile_salary) %>%
summarise(mean_excise_expend = sum(total_expend * finlwt21)/ sum(popwt),
pop = sum(popwt)) %>%
# 2. compute approximate total spending by group
ungroup() %>%
mutate(group_total = mean_excise_expend * pop) %>%
# 3. compute weights
mutate(group_wt = group_total/sum(group_total)) %>%
# 4. apply weights to BEA totals, and perform per capita transformations
# this gives us excise tax revenues apportioned by quintile - education groups,
# based on distribution of expenditure across groups,
# with equal expenditure across HH members (an issue with larger families with one income earner)
# BEA expenditures are reported in billions
mutate(excise_revenue = BEA_2023_excise_applied * 1000000000 * group_wt / pop) %>%
mutate(excise_rate = excise_revenue/mean_quintile_salary)
excise_taxes_applied
single = excise_taxes_applied[excise_taxes_applied$categorization=="single filer",]$excise_rate
joint_no_kids = excise_taxes_applied[excise_taxes_applied$categorization=="joint filer kids",]$excise_rate
joint_kids = excise_taxes_applied[excise_taxes_applied$categorization=="joint filer no kids",]$excise_rate
excise_taxes_applied
single = excise_taxes_applied[excise_taxes_applied$categorization=="single filer",]$excise_rate
joint_no_kids = excise_taxes_applied[excise_taxes_applied$categorization=="joint filer kids",]$excise_rate
joint_kids = excise_taxes_applied[excise_taxes_applied$categorization=="joint filer no kids",]$excise_rate
load(file.path(output_path, "h1b_scenarios_panel_inc_payroll_tax.RData"))
scenarios_panel = scenarios_panel %>%
mutate(excise_taxes = case_when(
scenario == 1 ~ (income_h1b+income_spouse)*single,
scenario == 2 ~ (income_h1b+income_spouse)*joint_kids,
scenario == 3 ~ (income_h1b+income_spouse)*joint_kids,
scenario == 4 ~ (income_h1b+income_spouse)*joint_no_kids,
scenario == 5 ~ (income_h1b+income_spouse)*joint_no_kids,
))
scenarios_panel = payroll_taxes %>%
mutate(excise_taxes = case_when(
scenario == 1 ~ (income_h1b+income_spouse)*single,
scenario == 2 ~ (income_h1b+income_spouse)*joint_kids,
scenario == 3 ~ (income_h1b+income_spouse)*joint_kids,
scenario == 4 ~ (income_h1b+income_spouse)*joint_no_kids,
scenario == 5 ~ (income_h1b+income_spouse)*joint_no_kids,
))
setwd(output_path)
save(scenarios_panel, file = "h1b_scenarios_panel_inc_payroll_excise_tax.RData")
# remove dependencies
rm(list = ls())
# load in packages
library(dplyr)
library(readxl)
library(openxlsx)
# set project directories
user_path = "/Users/sarah/Documents/GitHub"
project_path = file.path(user_path, "EIG-Fiscal-Impact-High-Skill-Federal")
data_path = file.path(project_path, "Data")
output_path = file.path(project_path, "Output")
###########################
# customs duties from OBM
customs_duties = read_excel(paste(
data_path,
"OBM",
"hist02z5_fy2025.xlsx",
sep="/"
), skip=2) %>% select(`Fiscal Year`, `Customs Duties and Fees`) %>%
# using population based projections.
# customs duties are in millions.
filter(`Fiscal Year` == 2023)
customs_duties = customs_duties$`Customs Duties and Fees`[1]
# read in population projections from the CBO
# using Jan 2023 estimates for the 2023 baseline.
population_projection = read_excel(paste(
data_path,
"CBO",
"57059-2023-01-Demographic-Projections.xlsx",
sep="/"
), sheet = "Population and Growth", skip=6)
population_projection = population_projection[5,] %>%
select(-c(...1))
customs_duties_combined = population_projection %>%
# reshaping
pivot_longer(cols = names(population_projection),
names_to = "Year",
values_to = "Population") %>% ungroup() %>%
mutate(Year = as.numeric(Year),
pop_2023 = case_when(
Year == 2023 ~ Population,
TRUE ~ 0), pop_2023 = max(pop_2023),
# population growth realtive to baseline year
population_growth = (Population/pop_2023)) %>%
# calculate customs duties per capita for each year.
# this is per capita customs duties in 2023 (customs_duties/pop_2023)
# multiplied by the population growth factor
mutate(customs_duties_per_capita = customs_duties/pop_2023*population_growth) %>%
select(Year, customs_duties_per_capita)
load(file.path(output_path, "h1b_scenarios_panel_inc_payroll_excise_tax.RData"))
scenarios_panel = scenarios_panel %>%
left_join(customs_duties_combined, by = "Year") %>%
mutate(customs_duties = customs_duties_per_capita *(1 + spouse)) %>%
select(-c(customs_duties_per_capita))
# export dataset
setwd(output_path)
save(scenarios_panel, file = "h1b_scenarios_panel_inc_payroll_excise_customs_tax.RData")
# remove dependencies
rm(list = ls())
# load in packages
library(dplyr)
library(readxl)
library(openxlsx)
# set project directories
user_path = "/Users/sarah/Documents/GitHub"
project_path = file.path(user_path, "EIG-Fiscal-Impact-High-Skill-Federal")
data_path = file.path(project_path, "Data")
methods_path = file.path(project_path, "Methodology")
output_path = file.path(project_path, "Output")
expenditures_methods= read_excel(
paste(methods_path,
"expenditures methodology.xlsx",
sep="/")) %>% na.omit() %>%
mutate(`1` = case_when(
`Scenario 1` == "fixed" ~ 0,
`Scenario 1` == "excluded" ~ 0,
`Scenario 1` == "average" ~ 1),
`2` = case_when(
`Scenario 2` == "fixed" ~ 0,
`Scenario 2` == "excluded" ~ 0,
`Scenario 2` == "average" ~ 1,
`Scenario 2` == "average (X2)" ~ 2),
`3` = case_when(
`Scenario 3` == "fixed" ~ 0,
`Scenario 3` == "excluded" ~ 0,
`Scenario 3` == "average" ~ 1,
`Scenario 3` == "average (X2)" ~ 2),
`4` = case_when(
`Scenario 4` == "fixed" ~ 0,
`Scenario 4` == "excluded" ~ 0,
`Scenario 4` == "average" ~ 1,
`Scenario 4` == "average (X2)" ~ 2),
`5` = case_when(
`Scenario 5` == "fixed" ~ 0,
`Scenario 5` == "excluded" ~ 0,
`Scenario 5` == "average" ~ 1,
`Scenario 5` == "average (X2)" ~ 2)) %>%
select(-c(contains("Scenario"))) %>%
# adjust elementary education spending to the # of children in the household
# 1.48 is the number of estimated children per household, conditional on being married.
# see 8. h1b demography.do
mutate(`2` = ifelse(`Function and Subfunction`=="501 Elementary, secondary, and vocational education",
`2`*1.48, `2`),
`3` = ifelse(`Function and Subfunction`=="501 Elementary, secondary, and vocational education",
`3`*1.48, `3`))
# read in expenditures data
fed_expenditures = read_excel(
paste(data_path, "OBM",
"hist03z2_fy2025.xlsx", sep="/"),
skip = 2) %>%
select(c(`Function and Subfunction`, `2023`)) %>%
mutate(`2023` = as.integer(`2023`),
`2023` = ifelse(`2023` <0, 0, `2023`))
# get US population in 2023
# https://www.census.gov/data/datasets/time-series/demo/popest/2020s-national-total.html
US_population_2023 = read_excel(
paste(
data_path,
"Census",
"NST-EST2023-POP.xlsx",
sep="/"),
skip = 2) %>%
rename(`pop2023`=`...6`) %>%
filter(`Geographic Area`=="United States")
US_population_2023=US_population_2023$pop2023[1]
print("US population as of 2023:")
US_population_2023
# per capita expenditure by category, according to scenario assumptions.
expenditures = merge(fed_expenditures, expenditures_methods,
by="Function and Subfunction", keep.all=TRUE) %>%
# in millions
mutate(expenditures_per_capita =
`2023`*1000000/US_population_2023) %>% select(-c(`2023`))
# apply growth rates. non applicables are left blank.
growth_rates = read_excel(paste(
data_path,
"OBM",
"expenditure projections.xlsx", sep="/"
), skip=2) %>%
select(`Function and Subfunction`, growth_rate_applied) %>% na.omit()
# merge in
expenditures_annual = right_join(expenditures, growth_rates, by = "Function and Subfunction" ) %>%
rename(`2023` = expenditures_per_capita) %>%
mutate(`2024` = `2023` + `2023`*growth_rate_applied,
`2025` = `2024` + `2024`*growth_rate_applied,
`2026` = `2025` + `2025`*growth_rate_applied,
`2027` = `2026` + `2026`*growth_rate_applied,
`2028` = `2027` + `2027`*growth_rate_applied,
`2029` = `2028` + `2028`*growth_rate_applied,
`2030` = `2029` + `2029`*growth_rate_applied,
`2031` = `2030` + `2030`*growth_rate_applied,
`2032` = `2031` + `2031`*growth_rate_applied,
`2033` = `2032` + `2032`*growth_rate_applied) %>%
# collapse by year
select(-c(growth_rate_applied)) %>%
pivot_longer(cols = c(`2023`, `2024`, `2025`, `2026`, `2027`, `2028`, `2029`, `2030`, `2031`, `2032`, `2033`),
names_to = "Year") %>%
mutate(`1` = `1`*value,
`2` = `2`*value,
`3` = `3`*value,
`4` = `4`*value,
`5` = `5`*value) %>% na.omit() %>%
ungroup() %>%
group_by(Year) %>%
summarise(`1` = sum(`1`),
`2` = sum(`2`),
`3` = sum(`3`),
`4` = sum(`4`),
`5` = sum(`5`)) %>%
# reshape again
pivot_longer(cols = c(`1`, `2`,`3`, `4`,`5`),
names_to = "scenario",
values_to = "federal_expenditures") %>%
mutate(Year = as.numeric(Year),
scenario = as.numeric(scenario))
# merge into full dataset, then export
setwd(output_path)
load("h1b_scenarios_panel_inc_payroll_excise_customs_tax.RData")
scenarios_panel = scenarios_panel %>%
left_join(expenditures_annual, by = c("Year", "scenario"))
# save
save(scenarios_panel, "scenarios_taxes_expenditures_combined.RData")
# save
save(scenarios_panel, file = "scenarios_taxes_expenditures_combined.RData")
# remove dependencies
rm(list = ls())
# load in packages
library(dplyr)
library(readxl)
library(openxlsx)
library(tidyr)
# set project directories
user_path = "/Users/sarah/Documents/GitHub"
project_path = file.path(user_path, "EIG-Fiscal-Impact-High-Skill-Federal")
methods_path = file.path(project_path, "Methodology")
output_path = file.path(project_path, "Output")
# read in full panel
load(file.path(output_path, "scenarios_taxes_expenditures_combined.RData"))
scenarios_panel = scenarios_panel %>%
mutate(taxes_individual = income_tax + total_payroll_taxes_employee + excise_taxes + customs_duties,
taxes_employer = total_payroll_taxes_employer,
taxes_total = taxes_individual + taxes_employer,
fiscal_impact = taxes_total - federal_expenditures
) %>%
select(Year, scenario,
income_type, income_h1b, income_spouse,
taxes_individual, taxes_employer, taxes_total,
federal_expenditures,
fiscal_impact)
scenarios_panel_2023 = scenarios_panel %>%
filter(Year==2023) %>% select(-c(Year))
# set scenario probabilities
probabilities = read_excel(
paste(methods_path,
"scenario probabilities.xlsx",
sep="/"),
sheet = "Scenario probabilities",
skip = 1
) %>% na.omit() %>%
mutate(scenario = as.numeric(...1)) %>%
select(scenario, contains("Probability"))
scenarios_panel = scenarios_panel %>%
left_join(probabilities, by = "scenario") %>%
mutate(probability  = case_when(
Year < 2023+6 ~ `Probability (years 1-6)`,
Year >= 2023 + 6 ~ `Probability (years 7-10)`
))
scenarios_panel_all_years_collapsed = scenarios_panel %>%
ungroup() %>% group_by(Year, income_type) %>%
summarise(fiscal_impact = sum(fiscal_impact*probability),
fed_expenditures = sum(federal_expenditures*probability),
taxes_individual = sum(taxes_individual*probability),
taxes_employer = sum(taxes_employer*probability),
taxes_total = sum(taxes_total*probability))
scenarios_panel_2023_collapsed = scenarios_panel_all_years_collapsed %>%
filter(Year == 2023)
#############
# save output
write.xlsx(scenarios_panel_2023,
paste(output_path, "RESULTS_2023_all_scen.xlsx", sep="/"))
write.xlsx(scenarios_panel_all_years_collapsed,
paste(output_path, "RESULTS_all_years_probabilistic.xlsx", sep="/"))
annual_100k = 100000
annual_500k = 500000
retention_rate_green_card = 0.45
cumulative_estimate = scenarios_panel_all_years_collapsed %>%
ungroup() %>%
filter(income_type == "mean") %>%
mutate(
# gained
new_h1bs_100k = annual_100k,
new_h1bs_500k = annual_500k,
# lost
lost_h1bs_100k = case_when(
Year < 2029 ~ 0,
Year >=2029 ~ annual_100k - (annual_100k*retention_rate_green_card)
),
lost_h1bs_500k = case_when(
Year < 2029 ~ 0,
Year >=2029 ~ annual_500k - (annual_500k*retention_rate_green_card)
),
# cumulative
adjusted_h1bs_annnual_100k =  new_h1bs_100k - lost_h1bs_100k,
adjusted_h1bs_annnual_500k =  new_h1bs_500k - lost_h1bs_500k,
adjusted_h1bs_100k = cumsum(adjusted_h1bs_annnual_100k),
adjusted_h1bs_500k = cumsum(adjusted_h1bs_annnual_500k),
# adjust revenues, expenditures, total impact to be a cumulative estimate
total_revs_100k = taxes_total*adjusted_h1bs_100k,
total_expend_100k = fed_expenditures*adjusted_h1bs_100k,
total_impact_100k = fiscal_impact*adjusted_h1bs_100k,
total_revs_500k = taxes_total*adjusted_h1bs_500k,
total_expend_500k = fed_expenditures*adjusted_h1bs_500k,
total_impact_500k = fiscal_impact*adjusted_h1bs_500k)
collapsed_estimate =
cumulative_estimate %>%
summarise(`total revenues_100k` = sum(total_revs_100k),
`total expenditures_100k` = sum(total_expend_100k),
`total impact_100k`= sum(total_impact_100k),
`total impact_100k`= sum(total_impact_100k),
`total revenues_500k`= sum(total_revs_500k),
`total expenditures_500k`= sum(total_expend_500k),
`total impact_500k`= sum(total_impact_500k)) %>%
pivot_longer(cols = c(contains("total"))) %>%
mutate(`annual h1b inflow` = substr(name, nchar(name) - 3, nchar(name)),
variable = substr(name, 1, nchar(name) - 5)) %>% select(variable, annual_h1b_inflow, value) %>%
pivot_wider(names_from = variable,
values_from = value)
cumulative_estimate = scenarios_panel_all_years_collapsed %>%
ungroup() %>%
filter(income_type == "mean") %>%
mutate(
# gained
new_h1bs_100k = annual_100k,
new_h1bs_500k = annual_500k,
# lost
lost_h1bs_100k = case_when(
Year < 2029 ~ 0,
Year >=2029 ~ annual_100k - (annual_100k*retention_rate_green_card)
),
lost_h1bs_500k = case_when(
Year < 2029 ~ 0,
Year >=2029 ~ annual_500k - (annual_500k*retention_rate_green_card)
),
# cumulative
adjusted_h1bs_annnual_100k =  new_h1bs_100k - lost_h1bs_100k,
adjusted_h1bs_annnual_500k =  new_h1bs_500k - lost_h1bs_500k,
adjusted_h1bs_100k = cumsum(adjusted_h1bs_annnual_100k),
adjusted_h1bs_500k = cumsum(adjusted_h1bs_annnual_500k),
# adjust revenues, expenditures, total impact to be a cumulative estimate
total_revs_100k = taxes_total*adjusted_h1bs_100k,
total_expend_100k = fed_expenditures*adjusted_h1bs_100k,
total_impact_100k = fiscal_impact*adjusted_h1bs_100k,
total_revs_500k = taxes_total*adjusted_h1bs_500k,
total_expend_500k = fed_expenditures*adjusted_h1bs_500k,
total_impact_500k = fiscal_impact*adjusted_h1bs_500k)
collapsed_estimate =
cumulative_estimate %>%
summarise(`total revenues_100k` = sum(total_revs_100k),
`total expenditures_100k` = sum(total_expend_100k),
`total impact_100k`= sum(total_impact_100k),
`total impact_100k`= sum(total_impact_100k),
`total revenues_500k`= sum(total_revs_500k),
`total expenditures_500k`= sum(total_expend_500k),
`total impact_500k`= sum(total_impact_500k)) %>%
pivot_longer(cols = c(contains("total"))) %>%
mutate(`annual h1b inflow` = substr(name, nchar(name) - 3, nchar(name)),
variable = substr(name, 1, nchar(name) - 5)) %>% select(variable, `annual h1b inflow`, value) %>%
pivot_wider(names_from = variable,
values_from = value)
write.xlsx(collapsed_estimate, paste(output_path, "cumulative impact.xlsx", sep="/"))
